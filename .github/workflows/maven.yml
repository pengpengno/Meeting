# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  attestations: write
on:
  schedule:
    - cron: "0 2 * * 1"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
#        server-username: MAVEN_USERNAME # env variable for username in deploy
#        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Compile and package the project using Maven
#      run: mvn -B package --file pom.xml -DskipTests -s settings.xml
#    - uses: actions/upload-artifact@v4
#      with:
#        name: Package
#        path: staging
#    - run: mkdir staging && cp target/*.jar staging

#    - name: Publish to the Maven Central Repository
#      run: mvn -B deploy --file pom.xml -DskipTests -s settings.xml
#      env:
#        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#        MAVEN_CENTRAL_TOKEN: ${{ secrets.OSSRH_TOKEN }}
#        MAVEN_GPG_PASSPHRASE: wal@!123
#        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
#    - name: Publish package
#      run: mvn --batch-mode deploy -DskipTests
#      env:
#        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}


#      - name: Setup Gluon's GraalVM
#        uses: gluonhq/setup-graalvm@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Install libraries
#        run: |
#          sudo apt-get update
#          sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev

#      - name: Gluon Build
#        run: |
#          export ANDROID_SDK=$ANDROID_HOME
#          mvn -Pandroid gluonfx:build gluonfx:package -pl meeting-gui -pl meeting-gui -am
#        env:
#          GLUON_ANDROID_KEYSTOREPATH: ${{ steps.android_keystore_file.outputs.filePath }}
#          GLUON_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.GLUON_ANDROID_KEYSTORE_PASSWORD }}
#          GLUON_ANDROID_KEYALIAS: ${{ secrets.GLUON_ANDROID_KEYALIAS }}
#          GLUON_ANDROID_KEYALIAS_PASSWORD: ${{ secrets.GLUON_ANDROID_KEYALIAS_PASSWORD }}

      - name: Make staging directory
        run: mkdir staging

      - name: Copy packages to staging
        run: cp -r ${{github.workplace}}/meeting-gui/target/gluonfx/aarch64-android/gvm/HelloGluon.* staging


      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: '${{ github.workspace }}/meeting-common/target/meeting-common-1.0.jar'

#  deploy:
#    # Add a dependency to the build job
#    needs: build
#
#    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
#    permissions:
#      pages: write      # to deploy to Pages
#      id-token: write   # to verify the deployment originates from an appropriate source
#
#    # Deploy to the github-pages environment
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#
#    # Specify runner + deployment step
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action

      # run: docker compose build

    # - name: Install mdBook
    #   run: |
    #     curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf -y | sh
    #     rustup update
    #     cargo install --version ${MDBOOK_VERSION} mdbook
    # - name: Setup Pages
    #   id: pages
    #   uses: actions/configure-pages@v3
#    - name: Build with mdBook
#      run: mdbook build
#    - name: Upload artifact
#      uses: actions/upload-pages-artifact@v2
#      with:
#        path: ./book
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#    - name: Update dependency graph
#      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
  # Deployment job
#  deploy:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2
